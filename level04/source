#include <signal.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <sys/wait.h>
#include <unistd.h>
#include <sys/ptrace.h>
#include <sys/types.h>

int main(int argc, char ** argv)
{
	int pid = fork();
	char str[0x80];
	unsigned int stat_loc = 0;
	unsigned int syscall = 0;

	// if parent
	if (pid != 0)
	{
		// do { get last syscall } while (syscall is not execve )
		do
		{
			// wait for the child process to syscall
			wait(&stat_loc);
			// if child process has exited, return
			if ( WIFEXITED(stat_loc) )
			{
				puts("child is exiting...");
				return 0;
			}
			// get the last syscall
			syscall = ptrace(PTRACE_PEEKUSER, pid, 44, 0);
		}
		while ( syscall != 11);
		puts("no exec() for you");
		kill(pid, SIGKILL);
	}
	else
	{
		int v;
		prctl(PR_SET_PDEATHSIG, 1, 0, 0, &v);
		ptrace(PTRACE_TRACEME, 0, 0, 0);
		puts("Give me some shellcode, k");
		gets(str);
	}
	return 0;
}
